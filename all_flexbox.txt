===============  Flexbox Guide  =================
=================================================

  * Introduction to Flexbox *
    Flexbox, short for Flexible Box Layout, is a CSS layout module designed to efficiently align and distribute space among elements in a container, even when their size is unknown. 
    It is primarily used for creating one-dimensional layouts (either rows or columns).

  * Key Features of Flexbox *
    Aligns elements to one another in different directions and orders.
    Allows elements to expand or shrink to optimally use the available space.
    Simplifies layout management compared to traditional float layouts.
    Offers better readability and maintainability.

  * Basic Concept *
    To use Flexbox, follow these steps:
      1. Create a Flex Container: Apply display: flex; to the parent element.
      2. Create Flex Items: All direct children of a flex container automatically become flex items.
    
  * Axes in Flexbox *
    
    Main Axis: The primary axis along which flex items are laid out (determined by flex-direction).
    
    Cross Axis: Perpendicular to the main axis.

------------------------------------------------------------------------------------------------------------
===============================================================================
  Flex Container Properties
  -------------------------  
    1. flex-direction
    Determines the direction of the main axis.
        row (default): Items are placed horizontally.
        row-reverse: Items are placed horizontally in reverse order.
        column: Items are placed vertically.
        column-reverse: Items are placed vertically in reverse order.
    
    2. flex-wrap
    Controls whether flex items should wrap to the next line if there is insufficient space.
        nowrap (default): All items stay on one line.
        wrap: Items wrap to the next line.
        wrap-reverse: Items wrap to the previous line.

    3. justify-content
    Defines how items are aligned along the main axis.
      flex-start (default): Items align at the beginning of the container.
      flex-end: Items align at the end.
      center: Items are centered.
      space-between: Items are evenly spaced with no gap at the edges.
      space-around: Items are evenly spaced with equal gaps on both sides.
      space-evenly: Equal spacing between all items.

    4. align-items
    Defines how items are aligned along the cross axis.
      stretch (default): Items stretch to fill the container.
      flex-start: Items align at the beginning of the cross axis.
      flex-end: Items align at the end.
      center: Items are centered.

    5. align-content 
    Controls the alignment of multiple rows of flex items along the cross axis (if wrapping is enabled).
      stretch (default): Rows stretch to fill the container.
      flex-start: Rows align at the beginning.
      flex-end: Rows align at the end.
      center: Rows are centered.
      space-between: Evenly spaced rows with no gaps at the edges.
      space-around: Evenly spaced rows with equal gaps on both sides.
      
------------------------------------------------------------------------------------------------
==========================================================================================
  Flex Item Properties
  --------------------      
    1. align-self
    Allows an individual flex item to override the align-items value.
      auto (default): Uses the parent's align-items value.
      flex-start: Aligns the item at the start of the cross axis.
      flex-end: Aligns the item at the end.
      center: Centers the item.
      stretch: Stretches the item to fill the container.

    2. order
    Controls the visual order of flex items (default value is 0). Items with lower order values appear first.
      Example: order: 1; moves the item to the end.
               order: 2; moves the item after the item with order 1.
               order: -1; moves the item to the beginning.
               order: -2; moves the item before the item with -1 order.
    
    3. flex-grow
    Defines how much a flex item can grow compared to other items.
      0 (default): Item will not grow.
      1+: Item grows based on available space.
    
    4. flex-shrink 
    Defines how much a flex item can shrink if necessary.
      1 (default): Item will shrink if needed.
      0: Item will not shrink.
      
    5. flex-basis
    Specifies the initial size of a flex item before space is distributed.
      Can be in px, %, em, or auto (default).
      
    6. flex (Shorthand)
    A shorthand property combining flex-grow, flex-shrink, and flex-basis.
      Example: flex: 1 1 auto;
        1: Grow equally.
        1: Shrink if necessary.
        auto: Use content size as the starting point.

-----------------------------------------------------------------------------------------------------------------
  ===============
  Additional Tips
  ---------------
  Use display: inline-flex; when you want the flex container to behave like an inline-level element.
  
  Combine with Media Queries to build responsive designs using Flexbox.
  
  Use DevTools to visualize and troubleshoot flex layouts.
       
    
        
   

    
